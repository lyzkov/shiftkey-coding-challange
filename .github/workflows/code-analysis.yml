on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]

name: Code Analysis
jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          device: ${{ 'iPhone 13' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath Build -enableCodeCoverage YES
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          device: ${{ 'iPhone 13' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath Build -enableCodeCoverage YES
      - name: Generate code coverage report
        run: |
          xcrun llvm-profdata merge Build/Build/ProfileData/*/*.profdata -output coverage.profdata
          # TODO: parse project modules in loop (dependencies modules should be excluded)
          xcrun --run llvm-cov show Build/Build/Products/Debug-iphonesimulator/CodingChallenge.app/CodingChallenge --instr-profile coverage.profdata > CodingChallenge.coverage
          xcrun --run llvm-cov show Build/Build/Products/Debug-iphonesimulator/Common.o --instr-profile coverage.profdata >> CodingChallenge.coverage
          xcrun --run llvm-cov show Build/Build/Products/Debug-iphonesimulator/Shifts.o --instr-profile coverage.profdata >> CodingChallenge.coverage
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: CodingChallenge.coverage
  scan:
    # TODO: Is it possible to run sonarcloud scan on macos-latest?
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - uses: actions/download-artifact@v3
      with:
        name: coverage
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
